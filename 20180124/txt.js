通过Backbone.js
- 观察者模式
	又叫发布订阅者模式，消息系统，消息机制，自定义事件
	解决观察者与被观察者之间，整体与个体之间，模块之间，对象之间的耦合。
- 事件对象 Events
	Events对象被Backbone中集合，模型，视图等继承了，因此我们不要直接
	污染这个对象，要先继承再使用，
	通过.extend方法继承一个新的Events对象
	On订阅事件的
		第一个参数表示事件名称
		第二个参数表示事件的回调函数
			参数是由trigger触发的时候传递的
			作用域调用on方法的对象
		trigger发布消息
			第一个参数表示事件名称
			从第二个参数开始表示传递的自定义数据
		命名空间
			语法 事件名称：命名空间
			具有的事件特征：想要触发必须在命名空间下触发，相当
			于一个新的事件。
		Off注销事件
			1.如果没有参数
				删除所有的事件
			2.如果有一个参数
				删除该事件名称下的所有回调函数
			3.如果有两个参数
				第一个参数表示事件名称
				第二个参数表示事件的回调函数
				删除该事件该回调函数（只能删除具有名字的回调函数，
				匿名函数不能通过这种方式删除）
		listenTo:跨对象监听事件
			第一个参数表示监听对象
			第二个参数表示事件名称
			第三个参数表示回调函数
				参数trigger时传递的自定义数据
				作用域是调用listenTo方法对的对象
		stopListening注销跨对象监听的事件
			第一种：没用参数
				注销所有的监听所有对象上的事件
				滋生是无法注销的
			第二种：有一个参数
				表示监听的对象
				注销的是对这个对象监听所有时间
			第三种：两个参数
				第一个参数表示监听对象
				第二个参数表示事件名称
				注销的是该监听对象上的所有回调函数
					具有命名空间的事件不能注销，必须单独注销
			第四种：三个参数
				第一个参数表示监听的对象
				第二个参数表示事件名称
				第三个参数表示回调函数
				注销该对象上的该事件下的该回调函数
				匿名函数不能通过这种方式注销
- 路由
	Url组成
		协议，域名，端口，路径，文件，query，hash
		前端的路由一般都是hash的变化
	使用路由：
		第一步 继承路由类
			Routes:定义路由规则
				属性名称表示规则
				属性值表示回调函数名
					回调函数一定要在参数对像中定义
		第二步 实例化路由对象
		第三步 启动路由
			通过Backbone.history.start()
	动态路由
		语法 /:query
		动态路由的参数会传递给回调函数作为参数
	路由事件
		通过Backbone.history.on定义路由事件
			事件名称route
			回调函数
				第一个参数：路由对象
				第二个参数：回调函数方法名称
				第三个参数：路由动态参数
				作用域history对象
	异步获取数据
		Fetch
		使用异步获取数据的功能
			第一步 定义url属性，表示请求的地址
			第二步 调用fetch方法，
				参数是一个对象
					Sucess属性方法，值是一个回调函数
						第一个参数表示实例化对象
						第二个参数表示请求返回的数据
						第三个参数表示配置信息


---------------------------------------------------------------

Vue
	- MVVM模型 Model ViewModel Model
		M：模型，机器可读性强的数据，例如数组，对象等
		V：视图，人眼可读性强的数据，例如下拉框，弹层等
		VM：视图模型，双向绑定，将模型中的数据与视图中的数据绑定在一起

		MVVM模式可以极大的简化我们开发的工作量

		V:视图就是前端中的dom对象
		M：模型就是前端中的数据
		VM：视图模型就是一些事件监听和数据绑定
	* 原生JS写项目，兼容性差，写起来麻烦，所以jquery出现了，
	可以极大的简化操作页面的问题，但是jquery开发项目，没有对
	业务逻辑分层，也就是说写的项目很乱，条理不清晰。所以很多
	框架就出现了。在这些框架中，我们操作dom还是很麻烦的，
	所以MVVM就出现了，实现数据到视图的双向绑定。

	Vue的获取
		github:
		官网 wwww.vuejs.org
		中文官网：cn.vuejs.org
		作者尤雨溪是华人，所以有中文文档
		参考react和anglar实现的
	<div id="app">{{msg}}</div>
	new Vue({
		//绑定视图
		el: '#app',
		//绑定数据
		data: data
	})

	在vue中，我们通过vue类来创建一个vue实例化对象，
	这个对象相当于VM对象，通过设置el属性来绑定一个
	视图容器
	通过设置data属性来绑定模型数据
	得到的vue实例化对象
		$el属性，表示视图容器元素
		定义data属性中的每一个属性会添加到vue实例化
		对象中。

	---------------------------------------------

	选择器

		vue支持常见选择器
		<div class="mydiv" id="myDiv"></div>
		div 元素名称选择器
		.mydiv 类选择器
		#myDiv id选择器
		常见的选择器 vue都支持

		如果页面中匹配到多个元素，只会处理第一个元素，
		后面的会忽略。

		如果对于同一元素创建多个vue实例，后面会被忽略

		注：一个vue实例化对象只能对象一个dom元素。

-----------------------------------------------------
